{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mern/ticketing/view/pages/orders/[orderId].js\";\nimport { useEffect, useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport Router from 'next/router';\nimport useRequest from '../../hooks/use-request';\n\nconst OrderShow = ({\n  order,\n  currentUser\n}) => {\n  const {\n    0: timeLeft,\n    1: setTimeLeft\n  } = useState(0);\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: 'http://localhost:3005/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: payment => Router.push('/orders')\n  });\n  useEffect(() => {\n    const findTimeLeft = () => {\n      const msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    const timerId = setInterval(findTimeLeft, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [order]);\n\n  if (timeLeft < 0 || order.status === 'completed') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Purchasing ticket: \", order.ticket.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Price: \", order.ticket.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Status: \", order.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Purchasing ticket: \", order.ticket.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Price: \", order.ticket.price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Status: \", order.status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Time left to pay: \", timeLeft, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(StripeCheckout, {\n      token: ({\n        id\n      }) => doRequest({\n        token: id\n      }),\n      stripeKey: \"pk_test_51HjfSGCqMWa1qdglzeLhiZWGtZ9shLXPB57hMl0gLylzoviCEszpv6u4um8De4QRZ8oQRrnZbGUA5393x2QYd4uy00C0ssLfBE\",\n      amount: order.ticket.price * 100,\n      email: currentUser.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: Router.push(`/orders/cancel/${order.id}`),\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), errors]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\nOrderShow.getInitialProps = async (context, client) => {\n  const {\n    orderId\n  } = context.query;\n  const {\n    data\n  } = await client.get(`http://localhost:3003/api/orders/${orderId}`);\n  return {\n    order: data\n  };\n};\n\nexport default OrderShow;","map":{"version":3,"sources":["/home/mern/ticketing/view/pages/orders/[orderId].js"],"names":["useEffect","useState","StripeCheckout","Router","useRequest","OrderShow","order","currentUser","timeLeft","setTimeLeft","doRequest","errors","url","method","body","orderId","id","onSuccess","payment","push","findTimeLeft","msLeft","Date","expiresAt","Math","round","timerId","setInterval","clearInterval","status","ticket","title","price","token","email","getInitialProps","context","client","query","data","get"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport Router from 'next/router';\n\nimport useRequest from '../../hooks/use-request';\n\nconst OrderShow = ({ order, currentUser }) => {\n  const [timeLeft, setTimeLeft] = useState(0);\n  const { doRequest, errors } = useRequest({\n    url: 'http://localhost:3005/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id,\n    },\n    onSuccess: (payment) => Router.push('/orders')\n  });\n\n  useEffect(() => {\n    const findTimeLeft = () => {\n      const msLeft = new Date(order.expiresAt) - new Date();\n\n      setTimeLeft(Math.round(msLeft / 1000));\n    }\n\n    findTimeLeft();\n    const timerId = setInterval(findTimeLeft, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    }\n  }, [order])\n\n  if(timeLeft < 0 || order.status === 'completed'){\n    return <div>\n      <h1>Purchasing ticket: {order.ticket.title}</h1>\n      <h4>Price: {order.ticket.price}</h4>\n      <h4>Status: {order.status}</h4>\n    </div>\n  }\n\n  return <div>\n    <h1>Purchasing ticket: {order.ticket.title}</h1>\n    <h4>Price: {order.ticket.price}</h4>\n    <h4>Status: {order.status}</h4>\n    <h4>Time left to pay: {timeLeft} seconds</h4>\n    <StripeCheckout\n      token={({ id }) => doRequest({ token: id })}\n      stripeKey=\"pk_test_51HjfSGCqMWa1qdglzeLhiZWGtZ9shLXPB57hMl0gLylzoviCEszpv6u4um8De4QRZ8oQRrnZbGUA5393x2QYd4uy00C0ssLfBE\"\n      amount={order.ticket.price * 100}\n      email={currentUser.email}\n    />\n    <button onClick={Router.push(`/orders/cancel/${order.id}`)}>Cancel</button>\n    {errors}\n  </div>\n};\n\nOrderShow.getInitialProps = async (context, client) => {\n  const { orderId } = context.query;\n  const { data } = await client.get(`http://localhost:3003/api/orders/${orderId}`);\n\n  return { order: data };\n}\n\nexport default OrderShow;"]},"metadata":{},"sourceType":"module"}